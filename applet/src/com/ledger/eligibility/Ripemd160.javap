/*
*******************************************************************************    
*   Java Card Bitcoin Hardware Wallet
*   (c) 2015 Ledger
*   
*   This program is free software: you can redistribute it and/or modify
*   it under the terms of the GNU Affero General Public License as
*   published by the Free Software Foundation, either version 3 of the
*   License, or (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU Affero General Public License for more details.
*
*   You should have received a copy of the GNU Affero General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*******************************************************************************   
*/    

package com.ledger.eligibility;

import javacard.framework.Util;

/**
 * RIPEMD160 implementation using shorts
 * @author BTChip
 *
 */

    #define decl(varname) \
      short varname ## HIGH = (short)0, varname ## LOW = (short)0

    #define declAdd() \
      short addX, addY, addLow, addCarry

    #define declRotate() \
      short rotH, rotL, rotMsk, rotSl, rotSh

    #define set(variable, a, b) \
      variable ## HIGH = (short)a; variable ## LOW = (short)b

    #define copy(variableTarget, variableSource) \
      variableTarget ## HIGH = variableSource ## HIGH; variableTarget ## LOW = variableSource ## LOW
   
    #define xor(variableTarget, variableSource) \
      variableTarget ## HIGH ^= variableSource ## HIGH; variableTarget ## LOW ^= variableSource ## LOW

    #define or(variableTarget, variableSource) \
      variableTarget ## HIGH |= variableSource ## HIGH; variableTarget ## LOW |= variableSource ## LOW

    #define and(variableTarget, variableSource) \
      variableTarget ## HIGH &= variableSource ## HIGH; variableTarget ## LOW &= variableSource ## LOW
    
    #define neg(variable) \
      variable ## HIGH = (short)(~variable ## HIGH); variable ## LOW = (short)(~variable ## LOW)

    #define addDirect(variable, high, low) \
      addX = variable ## LOW; \
      addY = low; \
      addLow = (short)(addX + addY); \
      addCarry = (short) ((((addX & addY) | (addX & ~addY & ~addLow) | (~addX & addY & ~addLow)) >>> 15) & 1); \
      variable ## HIGH += addCarry; \
      variable ## LOW = addLow; \
      variable ## HIGH += high            

    #define add(variableTarget, variableSource) \
      addDirect(variableTarget, variableSource ## HIGH, variableSource ## LOW)

    #define rotate(variableTarget, rot) \
        rotMsk = mask[rot]; \
        rotH = variableTarget ## HIGH; \
        rotL = variableTarget ## LOW; \
        rotSh = (short) (rotMsk & ((short) (rotH >>> ((short)(16-rot))))); \
        rotSl = (short) (rotMsk & ((short) (rotL  >>> ((short)(16-rot))))); \
        variableTarget ## HIGH = (short) ((rotH<<(short)rot) | rotSl); \
        variableTarget ## LOW  = (short) ((rotL<<(short)rot) | rotSh)            

    #define copyVar(variable, target, targetOffset) \
        target[targetOffset++] = (byte)(variable ## LOW); \
        target[targetOffset++] = (byte)(variable ## LOW >>> 8); \
        target[targetOffset++] = (byte)(variable ## HIGH); \
        target[targetOffset++] = (byte)(variable ## HIGH >>> 8)

    #define getX(index) \
        switch(index) { \
            case 0 : XLOW = X0LOW; XHIGH = X0HIGH; break; \
            case 1 : XLOW = X1LOW; XHIGH = X1HIGH; break; \
            case 2 : XLOW = X2LOW; XHIGH = X2HIGH; break; \
            case 3 : XLOW = X3LOW; XHIGH = X3HIGH; break; \
            case 4 : XLOW = X4LOW; XHIGH = X4HIGH; break; \
            case 5 : XLOW = X5LOW; XHIGH = X5HIGH; break; \
            case 6 : XLOW = X6LOW; XHIGH = X6HIGH; break; \
            case 7 : XLOW = X7LOW; XHIGH = X7HIGH; break; \
            case 8 : XLOW = X8LOW; XHIGH = X8HIGH; break; \
            case 9 : XLOW = X9LOW; XHIGH = X9HIGH; break; \
            case 10 : XLOW = X10LOW; XHIGH = X10HIGH; break; \
            case 11 : XLOW = X11LOW; XHIGH = X11HIGH; break; \
            case 12 : XLOW = X12LOW; XHIGH = X12HIGH; break; \
            case 13 : XLOW = X13LOW; XHIGH = X13HIGH; break; \
            case 14 : XLOW = X14LOW; XHIGH = X14HIGH; break; \
            case 15 : XLOW = X15LOW; XHIGH = X15HIGH; break; \
        }
 
public class Ripemd160 {

	// Scratch should be at least 64 bytes long    
    public static void hash32(byte[] buffer, short offset, byte[] target, short targetOffset, byte[] scratch)
    {
      byte i;
      decl(H0); decl(H1); decl(H2); decl(H3); decl(H4);
      decl(X0); decl(X1); decl(X2); decl(X3); decl(X4); decl(X5); decl(X6); decl(X7); decl(X8); decl(X9); decl(X10); decl(X11); decl(X12); decl(X13); decl(X14); decl(X15);
      decl(X);
      decl(A); decl(B); decl(C); decl(D); decl(E); decl(Ap); decl(Bp); decl(Cp); decl(Dp); decl(Ep); decl(T); decl(s); decl(tmp);
      declAdd(); declRotate();
      set(H0, 0x6745, 0x2301);
      set(H1, 0xEFCD, 0xAB89);
      set(H2, 0x98BA, 0xDCFE);
      set(H3, 0x1032, 0x5476);
      set(H4, 0xC3D2, 0xE1F0);
      Util.arrayFillNonAtomic(scratch, (short)0, (short)64, (byte)0x00);
      Util.arrayCopyNonAtomic(buffer, offset, scratch, (short)0, (short)32);
      scratch[32] = (byte)0x80;
      scratch[64 - 7] = (byte)0x01;
      // encode 64 bytes from input block into an array of 16 unsigned integers
      for (i = 0; i < 16; i++) {
        short low = (short)((scratch[offset++] & 0xff) | ((scratch[offset++] & 0xff) << 8));
        short high = (short)((scratch[offset++] & 0xff) | ((scratch[offset++] & 0xff) << 8));
        switch(i) {
            case 0: set(X0, high, low); break;
            case 1: set(X1, high, low); break;
            case 2: set(X2, high, low); break;
            case 3: set(X3, high, low); break;
            case 4: set(X4, high, low); break;
            case 5: set(X5, high, low); break;
            case 6: set(X6, high, low); break;
            case 7: set(X7, high, low); break;
            case 8: set(X8, high, low); break;
            case 9: set(X9, high, low); break;
            case 10: set(X10, high, low); break;
            case 11: set(X11, high, low); break;
            case 12: set(X12, high, low); break;
            case 13: set(X13, high, low); break;            
            case 14: set(X14, high, low); break;
            case 15: set(X15, high, low); break;            
        }
      }      
      copy(A, H0);
      copy(Ap, H0);
      copy(B, H1);
      copy(Bp, H1);
      copy(C, H2);
      copy(Cp, H2);
      copy(D, H3);
      copy(Dp, H3);
      copy(E, H4);
      copy(Ep, H4);                  
      for (i = 0; i < 80; i++) // rounds 0...15
        {
          set(s, 0, S[i]);          
          switch(i >> 4) {
              case 0:
                  //T = A + (B ^ C ^ D) + X[i];
                  copy(T, B);
                  xor(T, C);
                  xor(T, D);
                  add(T, A);
                  getX(i);
                  add(T, X);                  
                  break;
              case 1:
                  copy(T, B);
                  and(T, C);
                  copy(tmp, B);
                  neg(tmp);
                  and(tmp, D);
                  or(T, tmp);
                  add(T, A);
                  getX(R[i]);
                  add(T, X);
                  addDirect(T, (short)0x5A82, (short)0x7999);
                  //T = A + ((B & C) | (~B & D)) + X[R[i]] + 0x5A827999;
                  break;
              case 2:
                  copy(T, C);
                  neg(T);
                  or(T, B);
                  xor(T, D);
                  add(T, A);
                  getX(R[i]);
                  add(T, X);
                  addDirect(T, (short)0x6ED9, (short)0xEBA1);
                  //T = A + ((B | ~C) ^ D) + X[R[i]] + 0x6ED9EBA1;
                  break;
              case 3:
                  copy(T, B);
                  and(T, D);
                  copy(tmp, D);
                  neg(tmp);
                  and(tmp, C);
                  or(T, tmp);
                  add(T, A);
                  getX(R[i]);
                  add(T, X);
                  addDirect(T, (short)0x8F1B, (short)0xBCDC);
                  //T = A + ((B & D) | (C & ~D)) + X[R[i]] + 0x8F1BBCDC;
                  break;
              case 4:
                  copy(T, D);
                  neg(T);
                  or(T, C);
                  xor(T, B);
                  add(T, A);
                  getX(R[i]);
                  add(T, X);
                  addDirect(T, (short)0xA953, (short)0xFD4E);
                  //T = A + (B ^ (C | ~D)) + X[R[i]] + 0xA953FD4E;
                  break;
          }
          copy(A, E);
          copy(E, D);
          copy(D, C);
          rotate(D, (short)10);
          copy(C, B);
          copy(B, T);
          rotate(B, sLOW);
          add(B, A);
          /*
          A = E;
          E = D;
          D = C << 10 | C >>> 22;
          C = B;
          B = (T << s | T >>> (32 - s)) + A;
          */
          set(s, 0, Sp[i]);
          switch(i >> 4) {
              case 0:
                  copy(T, Dp);
                  neg(T);
                  or(T, Cp);
                  xor(T, Bp);
                  add(T, Ap);
                  getX(Rp[i]);
                  add(T, X);
                  addDirect(T, (short)0x50A2, (short)0x8BE6);
                  //T = Ap + (Bp ^ (Cp | ~Dp)) + X[Rp[i]] + 0x50A28BE6;
                  break;
              case 1:
                  copy(T, Bp);
                  and(T, Dp);
                  copy(tmp, Dp);
                  neg(tmp);
                  and(tmp, Cp);
                  or(T, tmp);
                  add(T, Ap);
                  getX(Rp[i]);
                  add(T, X);
                  addDirect(T, (short)0x5C4D, (short)0xD124);
                  //T = Ap + ((Bp & Dp) | (Cp & ~Dp)) + X[Rp[i]] + 0x5C4DD124;
                  break;
              case 2:
                  copy(T, Cp);
                  neg(T);
                  or(T, Bp);
                  xor(T, Dp);
                  add(T, Ap);
                  getX(Rp[i]);
                  add(T, X);
                  addDirect(T, (short)0x6D70, (short)0x3EF3);
                  //T = Ap + ((Bp | ~Cp) ^ Dp) + X[Rp[i]] + 0x6D703EF3;
                  break;
              case 3:
                  copy(T, Bp);
                  and(T, Cp);
                  copy(tmp, Bp);
                  neg(tmp);
                  and(tmp, Dp);
                  or(T, tmp);
                  add(T, Ap);
                  getX(Rp[i]);
                  add(T, X);
                  addDirect(T, (short)0x7A6D, (short)0x76E9);
                  //T = Ap + ((Bp & Cp) | (~Bp & Dp)) + X[Rp[i]] + 0x7A6D76E9;
                  break;
              case 4:
                  copy(T, Bp);
                  xor(T, Cp);
                  xor(T, Dp);
                  add(T, Ap);
                  getX(Rp[i]);
                  add(T, X);
                  //T = Ap + (Bp ^ Cp ^ Dp) + X[Rp[i]];
                  break;                                    
          }          
          copy(Ap, Ep);
          copy(Ep, Dp);
          copy(Dp, Cp);
          rotate(Dp, (short)10);
          copy(Cp, Bp);
          copy(Bp, T);
          rotate(Bp, sLOW);
          add(Bp, Ap);
          /*
          Ap = Ep;
          Ep = Dp;
          Dp = Cp << 10 | Cp >>> 22;
          Cp = Bp;
          Bp = (T << s | T >>> (32 - s)) + Ap;
          */
      }
      copy(T, H1);
      add(T, C);
      add(T, Dp);
      copy(H1, H2);
      add(H1, D);
      add(H1, Ep);
      copy(H2, H3);
      add(H2, E);
      add(H2, Ap);
      copy(H3, H4);
      add(H3, A);
      add(H3, Bp);
      copy(H4, H0);
      add(H4, B);
      add(H4, Cp);
      copy(H0, T);
      /*
      T = h[1] + C + Dp;
      h[1] = h[2] + D + Ep;
      h[2] = h[3] + E + Ap;
      h[3] = h[4] + A + Bp;
      h[4] = h[0] + B + Cp;
      h[0] = T;
      */      
      copyVar(H0, target, targetOffset);
      copyVar(H1, target, targetOffset);
      copyVar(H2, target, targetOffset);
      copyVar(H3, target, targetOffset);
      copyVar(H4, target, targetOffset);      
    }        
    
    // selection of message word
    private static final short[] R = {
        0,  1,  2,  3,  4,  5,  6,  7,  8, 9, 10, 11, 12, 13, 14, 15,
        7,  4, 13,  1, 10,  6, 15,  3, 12, 0,  9,  5,  2, 14, 11,  8,
        3, 10, 14,  4,  9, 15,  8,  1,  2, 7,  0,  6, 13, 11,  5, 12,
        1,  9, 11, 10,  0,  8, 12,  4, 13, 3,  7, 15, 14,  5,  6,  2,
        4,  0,  5,  9,  7, 12,  2, 10, 14, 1,  3,  8, 11,  6, 15, 13 };

    private static final short[] Rp = {
         5, 14,  7, 0, 9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
         6, 11,  3, 7, 0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
        15,  5,  1, 3, 7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
         8,  6,  4, 1, 3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
        12, 15, 10, 4, 1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11 };

    // amount for rotate left (rol)
    private static final short[] S = {
        11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
         7,  6,  8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
        11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
         9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 };

    private static final short[] Sp = {
         8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
         9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
         9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
         8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 };
            
    private static final short[] mask = {
        (short)0x0000, (short)0x0001, (short)0x0003, (short)0x0007,  
        (short)0x000F, (short)0x001F, (short)0x003F, (short)0x007F,  
        (short)0x00FF, (short)0x01FF, (short)0x03FF, (short)0x07FF,  
        (short)0x0FFF, (short)0x1FFF, (short)0x3FFF, (short)0x7FFF,  
    };          
                
}
