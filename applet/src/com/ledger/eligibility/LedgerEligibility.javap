/*
*******************************************************************************    
*   Java Card Bitcoin Hardware Wallet
*   (c) 2015 Ledger
*   
*   This program is free software: you can redistribute it and/or modify
*   it under the terms of the GNU Affero General Public License as
*   published by the Free Software Foundation, either version 3 of the
*   License, or (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU Affero General Public License for more details.
*
*   You should have received a copy of the GNU Affero General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*******************************************************************************   
*/    

package com.ledger.eligibility;

import javacard.framework.JCSystem;
import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.Util;
import javacard.security.ECKey;
import javacard.security.ECPrivateKey;
import javacard.security.ECPublicKey;
import javacard.security.HMACKey;
import javacard.security.KeyAgreement;
import javacard.security.KeyBuilder;
import javacard.security.KeyPair;
import javacard.security.MessageDigest;
import javacard.security.RandomData;
import javacard.security.Signature;

public class LedgerEligibility extends Applet {
	            
    // Test vectors 
    
    private static final byte SECP256K1_PRIVATE[] = {
    	(byte)0xfb, (byte)0x26, (byte)0xa4, (byte)0xe7, (byte)0x5e, (byte)0xec, (byte)0x75, (byte)0x54, 
    	(byte)0x4c, (byte)0x0f, (byte)0x44, (byte)0xe9, (byte)0x37, (byte)0xdc, (byte)0xf5, (byte)0xee, 
    	(byte)0x63, (byte)0x55, (byte)0xc7, (byte)0x17, (byte)0x66, (byte)0x00, (byte)0xb9, (byte)0x68, 
    	(byte)0x8c, (byte)0x66, (byte)0x7e, (byte)0x5c, (byte)0x28, (byte)0x3b, (byte)0x43, (byte)0xc5
    };
    private static final byte SECP256K1_PUBLIC[] = {
    	(byte)0x04,
    	
    	(byte)0x65, (byte)0xd5, (byte)0xb8, (byte)0xbf, (byte)0x9a, (byte)0xb1, (byte)0x80, (byte)0x1c, 
    	(byte)0x9f, (byte)0x16, (byte)0x8d, (byte)0x48, (byte)0x15, (byte)0x99, (byte)0x4a, (byte)0xd3, 
    	(byte)0x5f, (byte)0x1d, (byte)0xcb, (byte)0x6a, (byte)0xe6, (byte)0xc7, (byte)0xa1, (byte)0xa3, 
    	(byte)0x03, (byte)0x96, (byte)0x6b, (byte)0x67, (byte)0x7b, (byte)0x81, (byte)0x3b, (byte)0x00,
    	
    	(byte)0xe6, (byte)0xb8, (byte)0x65, (byte)0xe5, (byte)0x29, (byte)0xb8, (byte)0xec, (byte)0xbf,
    	(byte)0x71, (byte)0xcf, (byte)0x96, (byte)0x6e, (byte)0x90, (byte)0x04, (byte)0x77, (byte)0xd4, 
    	(byte)0x9c, (byte)0xed, (byte)0x58, (byte)0x46, (byte)0xd7, (byte)0x66, (byte)0x2d, (byte)0xd2, 
    	(byte)0xdd, (byte)0x11, (byte)0xcc, (byte)0xd5, (byte)0x5c, (byte)0x0a, (byte)0xff, (byte)0x7f    	
    };
    private static final byte SIGNATURE_DATA[] = {
    	(byte)'a', (byte)'b', (byte)'c'
    };
    private static final byte SIGNATURE_HASH[] = {
    	(byte)0xba, (byte)0x78, (byte)0x16, (byte)0xbf, (byte)0x8f, (byte)0x01, (byte)0xcf, (byte)0xea, 
    	(byte)0x41, (byte)0x41, (byte)0x40, (byte)0xde, (byte)0x5d, (byte)0xae, (byte)0x22, (byte)0x23,
    	(byte)0xb0, (byte)0x03, (byte)0x61, (byte)0xa3, (byte)0x96, (byte)0x17, (byte)0x7a, (byte)0x9c, 
    	(byte)0xb4, (byte)0x10, (byte)0xff, (byte)0x61, (byte)0xf2, (byte)0x00, (byte)0x15, (byte)0xad 
    };
    private static final byte SIGNATURE[] = {
    	  (byte)0x30, (byte)0x45,
    	  
    	  (byte)0x02, (byte)0x20,
    	  (byte)0x06, (byte)0x23, (byte)0xb4, (byte)0x15, (byte)0x9c, (byte)0x71, (byte)0x12, (byte)0x12, 
    	  (byte)0x5b, (byte)0xe5, (byte)0x17, (byte)0x16, (byte)0xd1, (byte)0xe7, (byte)0x06, (byte)0xd6,
    	  (byte)0x8e, (byte)0x52, (byte)0xf5, (byte)0xb3, (byte)0x21, (byte)0xda, (byte)0x68, (byte)0xd8, 
    	  (byte)0xb8, (byte)0x6b, (byte)0x3c, (byte)0x7c, (byte)0x70, (byte)0x19, (byte)0xa9, (byte)0xda,

    	  (byte)0x02, (byte)0x21,
    	  (byte)0x00,
    	  (byte)0x8d, (byte)0xff, (byte)0xe3, (byte)0xc5, (byte)0x92, (byte)0xa0, (byte)0xc7, (byte)0xe5, 
    	  (byte)0x16, (byte)0x8d, (byte)0xcb, (byte)0x3d, (byte)0x41, (byte)0x21, (byte)0xa6, (byte)0x0e,
    	  (byte)0xe7, (byte)0x27, (byte)0x08, (byte)0x2b, (byte)0xe4, (byte)0xfb, (byte)0xf7, (byte)0x9e, 
    	  (byte)0xae, (byte)0x56, (byte)0x49, (byte)0x29, (byte)0x15, (byte)0x63, (byte)0x05, (byte)0xfc,    	
    };

    private static final byte HASH_DATA[] = {
    	(byte)0x68, (byte)0x9A, (byte)0x06, (byte)0xB8, (byte)0xC7, (byte)0xB0, (byte)0x1A, (byte)0x80,
    	(byte)0x04, (byte)0x3C, (byte)0x1F, (byte)0xC1, (byte)0x73, (byte)0xEA, (byte)0x69, (byte)0x11,
    	(byte)0x32, (byte)0x1E, (byte)0xD4, (byte)0x5C, (byte)0xEC, (byte)0xD8, (byte)0x5C, (byte)0xF5, 
    	(byte)0x74, (byte)0x57, (byte)0x5E, (byte)0xA0, (byte)0x43, (byte)0xBC, (byte)0xC5, (byte)0x6B
    };
    private static final byte RIPEMD160[] = {
    	(byte)0x53, (byte)0x59, (byte)0x87, (byte)0x1b, (byte)0x68, (byte)0xcc, (byte)0x05, (byte)0x7d,
    	(byte)0xe1, (byte)0xa0, (byte)0xa6, (byte)0xb7, (byte)0x8b, (byte)0xeb, (byte)0x4a, (byte)0xcb,
    	(byte)0x69, (byte)0x35, (byte)0xf7, (byte)0x2d    	
    };
    private static final byte SHA512[] = {
    	(byte)0x0b, (byte)0xaa, (byte)0x4c, (byte)0x89, (byte)0x04, (byte)0xd0, (byte)0xb8, (byte)0x0b,
    	(byte)0xfc, (byte)0x5b, (byte)0xdb, (byte)0x83, (byte)0xea, (byte)0x29, (byte)0x7b, (byte)0xf5,
    	(byte)0x4e, (byte)0x8d, (byte)0xe5, (byte)0xa8, (byte)0xa8, (byte)0xc2, (byte)0x87, (byte)0x03,
    	(byte)0x05, (byte)0xc5, (byte)0xe4, (byte)0x81, (byte)0x14, (byte)0x16, (byte)0x68, (byte)0x54,
    	(byte)0x66, (byte)0x48, (byte)0x23, (byte)0xee, (byte)0x9a, (byte)0xdb, (byte)0x62, (byte)0xa4,
    	(byte)0x25, (byte)0xb8, (byte)0x4d, (byte)0xb9, (byte)0xdc, (byte)0x36, (byte)0xcf, (byte)0x6a,
    	(byte)0x38, (byte)0xa2, (byte)0xbf, (byte)0x49, (byte)0x10, (byte)0xb6, (byte)0xf9, (byte)0x5d,
    	(byte)0x2b, (byte)0xc8, (byte)0x51, (byte)0x7e, (byte)0x0e, (byte)0x9f, (byte)0x48, (byte)0xff
    };
    
    private static final byte SEED[] = {
    	(byte)0x7c, (byte)0x78, (byte)0x45, (byte)0x27, (byte)0x83, (byte)0x48, (byte)0xc3, (byte)0xe4,
    	(byte)0xbb, (byte)0x36, (byte)0x1b, (byte)0x46, (byte)0xd6, (byte)0xb1, (byte)0x8d, (byte)0xc3,
    	(byte)0xcd, (byte)0xe1, (byte)0x9b, (byte)0xfa, (byte)0xa7, (byte)0x6f, (byte)0xc7, (byte)0x2a,
    	(byte)0xc1, (byte)0xc6, (byte)0x46, (byte)0x38, (byte)0x8a, (byte)0xc7, (byte)0x51, (byte)0xef,
    	(byte)0x80, (byte)0x10, (byte)0x2a, (byte)0x30, (byte)0x5a, (byte)0x80, (byte)0x4f, (byte)0x6f,
    	(byte)0x91, (byte)0xc0, (byte)0x25, (byte)0x10, (byte)0x0a, (byte)0x7a, (byte)0xd2, (byte)0x80,
    	(byte)0x5e, (byte)0x72, (byte)0x9a, (byte)0xbf, (byte)0x8d, (byte)0x17, (byte)0x34, (byte)0x64,
    	(byte)0x57, (byte)0x4d, (byte)0x06, (byte)0x91, (byte)0xfd, (byte)0x47, (byte)0x17, (byte)0x62
    };
    private static final byte PRIVATE_SEED[] = {
    	(byte)0x40, (byte)0x87, (byte)0x95, (byte)0x8f, (byte)0x34, (byte)0x93, (byte)0x41, (byte)0x36,
    	(byte)0x18, (byte)0xf7, (byte)0xec, (byte)0x39, (byte)0xd1, (byte)0x39, (byte)0xa2, (byte)0xd8,
    	(byte)0xef, (byte)0x8e, (byte)0x13, (byte)0x09, (byte)0x17, (byte)0x38, (byte)0xd2, (byte)0x00,
    	(byte)0x57, (byte)0xea, (byte)0xfc, (byte)0x46, (byte)0xee, (byte)0x00, (byte)0x48, (byte)0xa4
    };
    private static final byte CHAIN_SEED[] = {
    	(byte)0x95, (byte)0x2f, (byte)0x9d, (byte)0x57, (byte)0x9a, (byte)0x96, (byte)0x1a, (byte)0x6f,
    	(byte)0x2c, (byte)0x44, (byte)0xc2, (byte)0x43, (byte)0x93, (byte)0x65, (byte)0x35, (byte)0xcb,
    	(byte)0x8c, (byte)0x98, (byte)0x06, (byte)0x26, (byte)0x36, (byte)0x9d, (byte)0x60, (byte)0x0e,
    	(byte)0x52, (byte)0xfb, (byte)0x6d, (byte)0x17, (byte)0xa9, (byte)0xcb, (byte)0xfd, (byte)0xcd
    };
    private static final byte DERIVATION_HARDENED[] = {
    	(byte)0xec, (byte)0x05, (byte)0x74, (byte)0x5a
    };
    private static final byte PRIVATE_HARDENED[] = {
    	(byte)0x47, (byte)0x42, (byte)0xba, (byte)0x5b, (byte)0x3a, (byte)0x3f, (byte)0xf6, (byte)0xd3,
    	(byte)0x92, (byte)0x74, (byte)0x9b, (byte)0x4e, (byte)0x58, (byte)0x91, (byte)0xa0, (byte)0xc1,
    	(byte)0xd5, (byte)0xa9, (byte)0xb3, (byte)0x73, (byte)0x22, (byte)0x94, (byte)0x49, (byte)0xa7,
    	(byte)0xda, (byte)0x3a, (byte)0xbd, (byte)0xad, (byte)0x9f, (byte)0x8c, (byte)0x19, (byte)0x28	
    };
    private static final byte CHAIN_HARDENED[] = {
    	(byte)0x61, (byte)0xf4, (byte)0x9d, (byte)0x22, (byte)0xc4, (byte)0xf4, (byte)0x5e, (byte)0x05,
    	(byte)0x26, (byte)0xaa, (byte)0x0a, (byte)0x9d, (byte)0x4e, (byte)0xea, (byte)0xad, (byte)0x49,
    	(byte)0x0f, (byte)0x94, (byte)0x45, (byte)0xbd, (byte)0xc9, (byte)0x36, (byte)0xb3, (byte)0x41,
    	(byte)0x90, (byte)0x93, (byte)0x35, (byte)0xd2, (byte)0x9a, (byte)0x76, (byte)0x84, (byte)0x03
    };
    private static final byte DERIVATION_NON_HARDENED[] = {    	
    	(byte)0x03, (byte)0x25, (byte)0x5d, (byte)0x34
    };
    private static final byte PRIVATE_NON_HARDENED[] = {
    	(byte)0x0b, (byte)0x16, (byte)0x63, (byte)0xa8, (byte)0xa9, (byte)0x38, (byte)0xfe, (byte)0x82,
    	(byte)0xa8, (byte)0xc7, (byte)0xf9, (byte)0xba, (byte)0xf2, (byte)0x81, (byte)0x64, (byte)0x7f,
    	(byte)0x6d, (byte)0x16, (byte)0x92, (byte)0xc8, (byte)0x1c, (byte)0xa7, (byte)0x27, (byte)0x06,
    	(byte)0x2b, (byte)0xa0, (byte)0x3b, (byte)0x7e, (byte)0xef, (byte)0x1b, (byte)0xb9, (byte)0x63
    };
    private static final byte CHAIN_NON_HARDENED[] = {    	
    	(byte)0xe4, (byte)0x18, (byte)0x39, (byte)0xf9, (byte)0xf5, (byte)0xf3, (byte)0xa9, (byte)0xf9,
    	(byte)0xf9, (byte)0x03, (byte)0x78, (byte)0x8f, (byte)0x0a, (byte)0xb4, (byte)0x73, (byte)0x40,
    	(byte)0x31, (byte)0x4f, (byte)0x85, (byte)0xa9, (byte)0xcf, (byte)0x0b, (byte)0x24, (byte)0x4c,
    	(byte)0xab, (byte)0x22, (byte)0x24, (byte)0xa4, (byte)0xd9, (byte)0xb4, (byte)0x2f, (byte)0xf0
    };
    
	private static final byte BITCOIN_SEED[] = {
		'B', 'i', 't', 'c', 'o', 'i', 'n', ' ', 's', 'e', 'e', 'd'
	};

    //private static final short HMAC_KEY_LENGTH = KeyBuilder.LENGTH_HMAC_SHA_512_BLOCK_128;
    private static final short HMAC_KEY_LENGTH = (short)(32 * 8);
    
    
    // EC keys
	
    private static ECPrivateKey privateKey;
    private static ECPublicKey publicKey;
    private static KeyPair keyPair;
    private static Signature signatureEc;
    private static byte ecAlgorithm;
    
    // Key Agreement
    
    private static KeyAgreement keyAgreement;
    
    // Digests
    
    private static MessageDigest nativeRipemd160;
    private static MessageDigest nativeSha512;
    private static SHA512 sha512;
    
    // HMAC
    
    private static Signature nativeHmacSha512;
    private static HMACKey hmacKey;
    private static byte hmacAlgorithm;
    
    // Random
    
    private static RandomData random;
    private static byte randomAlgorithm;
    
    private static byte[] buffer;
    private static ProprietaryAPI proprietaryAPI;

    private static final byte INS_TEST_EC = (byte)0x20;
    private static final byte INS_TEST_ECDH = (byte)0x22;
    private static final byte INS_TEST_RIPEMD160 = (byte)0x24;
    private static final byte INS_TEST_SHA512 = (byte)0x26;
    private static final byte INS_TEST_BIP32_GEN = (byte)0x28;
    private static final byte INS_TEST_BIP32_DERIVATION = (byte)0x2A;
    
    private static final byte STATUS_PASSED = (byte)0x01;
    private static final byte STATUS_FAILED_GENERIC = (byte)0xf0;
    private static final byte STATUS_FAILED_SIGNATURE_GENERATION = (byte)0xf1;
    private static final byte STATUS_FAILED_SIGNATURE_VALIDATION = (byte)0xf2;
    private static final byte STATUS_FAILED_KEY_AGREEMENT_X = (byte)0xf1;
    private static final byte STATUS_FAILED_KEY_AGREEMENT_XY = (byte)0xf2;
    private static final byte STATUS_FAILED_INTERNAL = (byte)0xff;
    
    private static final byte FLAG_SECURE_RANDOM_SUPPORTED = (byte)0x01;
    private static final byte FLAG_EC_KEY_GENERATION_SUPPORTED = (byte)0x02;
    private static final byte FLAG_EC_TRANSIENT_RESET = (byte)0x04;
    private static final byte FLAG_EC_TRANSIENT_DESELECT = (byte)0x08;
    private static final byte FLAG_EC_RFC6979_SUPPORT = (byte)0x10;
    private static final byte FLAG_KEY_AGREEMENT_X = (byte)0x01;
    private static final byte FLAG_KEY_AGREEMENT_XY = (byte)0x02;
    private static final byte FLAG_NATIVE_RIPEMD160 = (byte)0x01;
    private static final byte FLAG_NATIVE_SHA512 = (byte)0x01;
    private static final byte FLAG_NATIVE_HMAC_SHA512 = (byte)0x01;
    private static final byte FLAG_HMAC_TRANSIENT_RESET = (byte)0x02;
    private static final byte FLAG_HMAC_TRANSIENT_DESELECT = (byte)0x04;
    
    // Bip32 local implementation to save stack
    
    // block : 128 bytes
	//public static void deriveSeedBip32(Signature hmac, HMACKey hmacKey, byte[] seed, short seedOffset, short seedLength, byte[] target, short targetOffset, byte[] block, short blockOffset) {
#define deriveSeedBip32(hmacNative, hmacKey, seed, seedOffset, seedLength, target, targetOffset, block, blockOffset) \
		if ((hmacNative != null) && (hmacKey != null)) {\
			hmacKey.setKey(BITCOIN_SEED, (short)0, (short)BITCOIN_SEED.length);\
			if ((proprietaryAPI != null) && (proprietaryAPI.hasHmacSHA512())) { \
				proprietaryAPI.hmacSHA512(hmacKey, seed, seedOffset, seedLength, target, targetOffset); \
			}\
			else {\
				hmacNative.init(hmacKey, Signature.MODE_SIGN);\
				hmacNative.sign(seed, seedOffset, seedLength, target, targetOffset);\
			}\
		}\
		else {\
			HmacSha512.hmac(BITCOIN_SEED, (short)0, (short)BITCOIN_SEED.length, seed, seedOffset, seedLength, target, targetOffset, block, blockOffset);\
		}	
	//}
	
	// tmp : 65 bytes
	// block : 128 bytes
	//public static void deriveBip32(Signature hmac, HMACKey hmacKey, byte[] privateKey, short privateKeyOffset, byte[] chain, short chainOffset, byte[] deriveItem, short deriveItemOffset, byte[] target, short targetOffset, byte[] tmp, short tmpOffset, byte[] block, short blockOffset) {
#define deriveBip32(hmacNative, hmacKey, privateKey, privateKeyOffset, chain, chainOffset, deriveItem, deriveItemOffset, target, targetOffset, tmp, tmpOffset, block, blockOffset) \
		boolean isZero = true;\
		byte i;\
		if ((deriveItem[0] & (byte)0x80) == 0) {\
			proprietaryAPI.getUncompressedPublicPoint(privateKey, privateKeyOffset, tmp, tmpOffset);\
			tmp[tmpOffset] = ((tmp[(short)(tmpOffset + 64)] & 1) != 0 ? (byte)0x03 : (byte)0x02);\
		}\
		else {\
			tmp[tmpOffset] = 0;\
			Util.arrayCopyNonAtomic(privateKey, privateKeyOffset, tmp, (short)(tmpOffset + 1), (short)32);\
		}\
		Util.arrayCopyNonAtomic(deriveItem, deriveItemOffset, tmp, (short)(tmpOffset + 33), (short)4);\
		if ((hmacNative != null) && (hmacKey != null)) {\
			hmacKey.setKey(chain, chainOffset, (short)32);\
			if ((proprietaryAPI != null) && (proprietaryAPI.hasHmacSHA512())) { \
				proprietaryAPI.hmacSHA512(hmacKey, tmp, tmpOffset, (short)37, tmp, tmpOffset); \
			}\
			else {\
				hmacNative.init(hmacKey, Signature.MODE_SIGN);\
				hmacNative.sign(tmp, tmpOffset, (short)37, tmp, tmpOffset);\
			}\
		}\
		else {\
			HmacSha512.hmac(chain, chainOffset, (short)32, tmp, tmpOffset, (short)37, tmp, tmpOffset, block, blockOffset);\
		}\
		if (MathMod256.ucmp(tmp, tmpOffset, Secp256k1.SECP256K1_R, (short)0) >= 0) {\
			ISOException.throwIt(ISO7816.SW_WRONG_DATA);\
		}\
		MathMod256.addm(target, targetOffset, tmp, tmpOffset, privateKey, privateKeyOffset, Secp256k1.SECP256K1_R, (short)0);\
		for (i=0; i<(byte)32; i++) {\
			if (target[(short)(targetOffset + i)] != 0) {\
				isZero = false;\
				break;\
			}\
		}\
		if (isZero) {\
			ISOException.throwIt(ISO7816.SW_WRONG_DATA);\
		}\
		Util.arrayCopyNonAtomic(tmp, (short)(tmpOffset + 32), target, (short)(targetOffset + 32), (short)32);		
	//}    
  
    private static void testEc(byte[] apduBuffer) {
    	byte lastStatus = STATUS_FAILED_GENERIC;
    	byte flags = (byte)0;
    	if (privateKey != null) {
    		if (ecAlgorithm != KeyBuilder.TYPE_EC_FP_PRIVATE) {
    			if (!Secp256k1.setCommonCurveParameters(privateKey)) {
    				lastStatus = STATUS_FAILED_INTERNAL;
    			}
    			if (keyPair != null) {
    				if (!Secp256k1.setCommonCurveParameters((ECKey)keyPair.getPrivate())) {
    					lastStatus = STATUS_FAILED_INTERNAL;
    				}
    				if (!Secp256k1.setCommonCurveParameters((ECKey)keyPair.getPublic())) {
    					lastStatus = STATUS_FAILED_INTERNAL;
    				}
    			}
    		}
    		// Try key generation
    		try {
    			keyPair.genKeyPair();
    			flags |= FLAG_EC_KEY_GENERATION_SUPPORTED;
    		}
    		catch (Exception e) {    			
    		}    		
    		// Try signature
    		if (lastStatus != STATUS_FAILED_INTERNAL) {
    			lastStatus = STATUS_FAILED_SIGNATURE_GENERATION;
    		}
    		try {
    			privateKey.setS(SECP256K1_PRIVATE, (short)0, (short)SECP256K1_PRIVATE.length);
    			publicKey.setW(SECP256K1_PUBLIC, (short)0, (short)SECP256K1_PUBLIC.length);
    		}
    		catch(Exception e) {
    			lastStatus = STATUS_FAILED_INTERNAL;
    		}    		
    		if ((lastStatus != STATUS_FAILED_INTERNAL) && (signatureEc != null)) {
    			try {
    				signatureEc.init(privateKey, Signature.MODE_SIGN);
    				short signatureLength = signatureEc.sign(SIGNATURE_DATA, (short)0, (short)SIGNATURE_DATA.length, buffer, (short)0);
    				// Should self verify
    				signatureEc.init(publicKey, Signature.MODE_VERIFY);
    				if (signatureEc.verify(SIGNATURE_DATA, (short)0, (short)SIGNATURE_DATA.length, buffer, (short)0, signatureLength)) {
    					// Now verify provided test signature
    					lastStatus = STATUS_FAILED_SIGNATURE_VALIDATION;
    					signatureEc.init(publicKey, Signature.MODE_VERIFY);
    					if (signatureEc.verify(SIGNATURE_DATA, (short)0, (short)SIGNATURE_DATA.length, SIGNATURE, (short)0, (short)SIGNATURE.length)) {
    						lastStatus = STATUS_PASSED;
    					}
    				}
    			}
    			catch(Exception e) {
    				lastStatus = STATUS_FAILED_INTERNAL;
    			}
    		}    		
    	}
    	if (randomAlgorithm == RandomData.ALG_SECURE_RANDOM) {
    		flags |= FLAG_SECURE_RANDOM_SUPPORTED;
    	}
    	if (ecAlgorithm == KeyBuilder.TYPE_EC_FP_PRIVATE_TRANSIENT_DESELECT) {
    		flags |= FLAG_EC_TRANSIENT_DESELECT;
    	}
    	if (ecAlgorithm == KeyBuilder.TYPE_EC_FP_PRIVATE_TRANSIENT_RESET) {
    		flags |= FLAG_EC_TRANSIENT_RESET;
    	}
    	apduBuffer[0] = lastStatus;
    	apduBuffer[1] = flags;
    }
    
    private static void testEcdh(byte[] apduBuffer) {
    	byte lastStatus = STATUS_FAILED_KEY_AGREEMENT_X;
    	byte flags = (byte)0;
    	if ((keyAgreement != null) && (privateKey != null)) {
        	if (ecAlgorithm != KeyBuilder.TYPE_EC_FP_PRIVATE) {
        		Secp256k1.setCommonCurveParameters(privateKey);
        	}
    		try {
    			privateKey.setS(SECP256K1_PRIVATE, (short)0, (short)SECP256K1_PRIVATE.length);
    			keyAgreement.init(privateKey);
    			keyAgreement.generateSecret(Secp256k1.SECP256K1_G, (short)0, (short)Secp256k1.SECP256K1_G.length, buffer, (short)0);
    			if (Util.arrayCompare(SECP256K1_PUBLIC, (short)1, buffer, (short)0, (short)32) == 0) {
    				lastStatus = STATUS_PASSED;
    				flags |= FLAG_KEY_AGREEMENT_X;
    			}
    		}
    		catch(Exception e) {
    			lastStatus = STATUS_FAILED_INTERNAL;
    		}        	  
    		try {
    			if ((lastStatus == STATUS_PASSED) && (proprietaryAPI != null)) {
    				proprietaryAPI.getUncompressedPublicPoint(SECP256K1_PRIVATE, (short)0, apduBuffer, (short)0);
    				if (Util.arrayCompare(SECP256K1_PUBLIC, (short)0, apduBuffer, (short)0, (short)65) == 0) {
    					lastStatus = STATUS_PASSED;
    					flags |= FLAG_KEY_AGREEMENT_XY;
    				}
    				else {
    					lastStatus = STATUS_FAILED_KEY_AGREEMENT_XY;
    				}
    			}
    		}
    		catch(Exception e) {
    			lastStatus = STATUS_FAILED_KEY_AGREEMENT_XY;
    		}  		
    	}
    	apduBuffer[0] = lastStatus;
    	apduBuffer[1] = flags;    	
    }
    
    private static void testRipemd160(byte[] apduBuffer) {    	
    	byte lastStatus = STATUS_FAILED_GENERIC;
    	byte flags = (byte)0;
    	if (nativeRipemd160 != null) {
    		try {
    			nativeRipemd160.doFinal(HASH_DATA, (short)0, (short)HASH_DATA.length, buffer, (short)0);
    			flags |= FLAG_NATIVE_RIPEMD160;
    		}
    		catch(Exception e) {
    			lastStatus = STATUS_FAILED_INTERNAL;
    		}
    	}
    	else {
    		try {
    			Ripemd160.hash32(HASH_DATA, (short)0, buffer, (short)0, apduBuffer);
    		}
    		catch(Exception e) {
    			lastStatus = STATUS_FAILED_INTERNAL;
    		}
    	}
    	if (Util.arrayCompare(RIPEMD160, (short)0, buffer, (short)0, (short)RIPEMD160.length) == 0) {
    		lastStatus = STATUS_PASSED;
    	}
    	apduBuffer[0] = lastStatus;
    	apduBuffer[1] = flags;    	    	
    }
        
    private static void testSha512(byte[] apduBuffer) {
    	byte lastStatus = STATUS_FAILED_GENERIC;
    	byte flags = (byte)0;
    	if (nativeSha512 != null) {
    		try {
    			nativeSha512.doFinal(HASH_DATA, (short)0, (short)HASH_DATA.length, buffer, (short)0);
    			flags |= FLAG_NATIVE_SHA512;
    		}
    		catch(Exception e) {    			
    			lastStatus = STATUS_FAILED_INTERNAL;
    		}
    	}
    	else {
    		try {
    			sha512.init();
    			sha512.doFinal(HASH_DATA, (short)0, (short)HASH_DATA.length, buffer, (short)0);
    		}
    		catch(Exception e) {    			
    			lastStatus = STATUS_FAILED_INTERNAL;
    		}
    	}
    	if (Util.arrayCompare(SHA512, (short)0, buffer, (short)0, (short)SHA512.length) == 0) {
    		lastStatus = STATUS_PASSED;
    	}
    	apduBuffer[0] = lastStatus;
    	apduBuffer[1] = flags;    	
    }
            
    private static void testBip32Gen(byte[] apduBuffer) {
    	byte lastStatus = STATUS_FAILED_GENERIC;
    	byte flags = (byte)0x00;
    	try {
    		//Bip32.deriveSeed(nativeHmacSha512, hmacKey, SEED, (short)0, (short)SEED.length, buffer, (short)0, apduBuffer, (short)0);
    		deriveSeedBip32(nativeHmacSha512, hmacKey, SEED, (short)0, (short)SEED.length, buffer, (short)0, apduBuffer, (short)0);
    		if ((Util.arrayCompare(PRIVATE_SEED, (short)0, buffer, (short)0, (short)32) == 0) &&
    			(Util.arrayCompare(CHAIN_SEED, (short)0, buffer, (short)32, (short)32) == 0)) {
    			lastStatus = STATUS_PASSED;    			
    		}    		
    		if ((nativeHmacSha512 != null) && (hmacKey != null)) {
    			flags |= FLAG_NATIVE_HMAC_SHA512;
    		}
    		if (hmacAlgorithm == KeyBuilder.TYPE_HMAC_TRANSIENT_DESELECT) {
    			flags |= FLAG_HMAC_TRANSIENT_DESELECT;
    		}
    		if (hmacAlgorithm == KeyBuilder.TYPE_HMAC_TRANSIENT_RESET) {
    			flags |= FLAG_HMAC_TRANSIENT_RESET;
    		}
    	}
    	catch(Exception e) {    		
    		lastStatus = STATUS_FAILED_INTERNAL;
    	}    	
    	apduBuffer[0] = lastStatus;
    	apduBuffer[1] = flags;    	    	
    }
    
    private static void testBip32Derive(byte[] apduBuffer, boolean hardened) {    	
    	byte lastStatus = STATUS_FAILED_GENERIC;
    	byte flags = (byte)0;
    	try {
    		if (hardened) {
    			//Bip32.derive(nativeHmacSha512, hmacKey, PRIVATE_SEED, (short)0, CHAIN_SEED, (short)0, DERIVATION_HARDENED, (short)0, buffer, (short)0, apduBuffer, (short)0, apduBuffer, (short)65);    		
    			deriveBip32(nativeHmacSha512, hmacKey, PRIVATE_SEED, (short)0, CHAIN_SEED, (short)0, DERIVATION_HARDENED, (short)0, buffer, (short)0, apduBuffer, (short)0, apduBuffer, (short)65);
    			if ((Util.arrayCompare(PRIVATE_HARDENED, (short)0, buffer, (short)0, (short)32) == 0) &&
        			(Util.arrayCompare(CHAIN_HARDENED, (short)0, buffer, (short)32, (short)32) == 0)) {
        			lastStatus = STATUS_PASSED;    			
        		}
        	}
        	else {
    			//Bip32.derive(nativeHmacSha512, hmacKey, PRIVATE_SEED, (short)0, CHAIN_SEED, (short)0, DERIVATION_NON_HARDENED, (short)0, buffer, (short)0, apduBuffer, (short)0, apduBuffer, (short)65);    		
    			deriveBip32(nativeHmacSha512, hmacKey, PRIVATE_SEED, (short)0, CHAIN_SEED, (short)0, DERIVATION_NON_HARDENED, (short)0, buffer, (short)0, apduBuffer, (short)0, apduBuffer, (short)65);
    			if ((Util.arrayCompare(PRIVATE_NON_HARDENED, (short)0, buffer, (short)0, (short)32) == 0) &&
        			(Util.arrayCompare(CHAIN_NON_HARDENED, (short)0, buffer, (short)32, (short)32) == 0)) {
        			lastStatus = STATUS_PASSED;    			
        		}
        	}    		
    	}
    	catch(Exception e) {
    		lastStatus = STATUS_FAILED_INTERNAL;
    	}    	
    	apduBuffer[0] = lastStatus;
    	apduBuffer[1] = flags;    	    	    	
    }
        
    public LedgerEligibility() {
#if defined(JCOP) || defined(JCOP3)
    	proprietaryAPI = new JCOPProprietaryAPI();
#endif
    	// Elliptic curves initialization
    	try {
		keyPair = new KeyPair(
			(ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC, KeyBuilder.LENGTH_EC_FP_256, false), 
			(ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE, KeyBuilder.LENGTH_EC_FP_256, false));
	}
	catch(Exception e) {
	}
    	try {
    		privateKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE_TRANSIENT_DESELECT, KeyBuilder.LENGTH_EC_FP_256, false);
    		ecAlgorithm = KeyBuilder.TYPE_EC_FP_PRIVATE_TRANSIENT_DESELECT;
    	}
    	catch(Exception e) {
    		try {
    			privateKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE_TRANSIENT_RESET, KeyBuilder.LENGTH_EC_FP_256, false);
    			ecAlgorithm = KeyBuilder.TYPE_EC_FP_PRIVATE_TRANSIENT_RESET;
    		}
    		catch(Exception e1) {
    			try {
    				privateKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE, KeyBuilder.LENGTH_EC_FP_256, false);
    				ecAlgorithm = KeyBuilder.TYPE_EC_FP_PRIVATE;        				
    			}
    			catch(Exception e2) {        				
    			}
    		}    			
    	}
    	if (privateKey != null) {
    		try {
    			publicKey = (ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC, KeyBuilder.LENGTH_EC_FP_256, false);
    		}
    		catch(Exception e) {    				
    		}
    	}
    	try {
    		signatureEc = Signature.getInstance(Signature.ALG_ECDSA_SHA_256, false);    			
    	}
    	catch(Exception e) {    			
    	}
    	// Initialize curve
    	if (publicKey != null) {
    		Secp256k1.setCommonCurveParameters(publicKey);
    	}
    	if ((privateKey != null) && (ecAlgorithm == KeyBuilder.TYPE_EC_FP_PRIVATE)) {
    		Secp256k1.setCommonCurveParameters(privateKey);
	}
	if (keyPair != null) {
    		Secp256k1.setCommonCurveParameters((ECKey)keyPair.getPrivate());
    		Secp256k1.setCommonCurveParameters((ECKey)keyPair.getPublic());
    	}
    	// Key agreement initialization
    	try {
    		keyAgreement = KeyAgreement.getInstance(KeyAgreement.ALG_EC_SVDP_DH_PLAIN, false);
    	}
    	catch(Exception e) {    		
    	}
    	// Random initialization
    	try {
    		random = RandomData.getInstance(RandomData.ALG_SECURE_RANDOM);
    		randomAlgorithm = RandomData.ALG_SECURE_RANDOM;
    	}
    	catch(Exception e) {
    		random = RandomData.getInstance(RandomData.ALG_PSEUDO_RANDOM);
    		randomAlgorithm = RandomData.ALG_PSEUDO_RANDOM;
    	}
    	// Digests initialization
    	try {
    		nativeRipemd160 = MessageDigest.getInstance(MessageDigest.ALG_RIPEMD160, false);
    	}
    	catch(Exception e) {
    	}
    	try {
    		nativeSha512 = MessageDigest.getInstance(MessageDigest.ALG_SHA_512, false);
    	}
    	catch(Exception e) {
    		sha512 = new SHA512();
    	}
    	// HMAC initialization
    	try {
    		nativeHmacSha512 = Signature.getInstance(Signature.ALG_HMAC_SHA_512, false);
    		try {
    			hmacKey = (HMACKey)KeyBuilder.buildKey(KeyBuilder.TYPE_HMAC_TRANSIENT_DESELECT, HMAC_KEY_LENGTH, false);
    			hmacAlgorithm = KeyBuilder.TYPE_HMAC_TRANSIENT_DESELECT; 
    		}
    		catch(Exception e) {
    			try {
    				hmacKey = (HMACKey)KeyBuilder.buildKey(KeyBuilder.TYPE_HMAC_TRANSIENT_RESET, HMAC_KEY_LENGTH, false);
    				hmacAlgorithm = KeyBuilder.TYPE_HMAC_TRANSIENT_RESET;
    			}
    			catch(Exception e1) {
    				try {
    					hmacKey = (HMACKey)KeyBuilder.buildKey(KeyBuilder.TYPE_HMAC, HMAC_KEY_LENGTH, false);
    					hmacAlgorithm = KeyBuilder.TYPE_HMAC;
    				}
    				catch(Exception e2) {    					
    				}
    			}
    		}
    	}
    	catch(Exception e) {
    	}
	try {
		buffer = JCSystem.makeTransientByteArray((short)200, JCSystem.CLEAR_ON_DESELECT);
	}
	catch(Exception e) {
		buffer = new byte[200];
	}
    	SHA512Wrapper.init(nativeSha512, sha512);
    	//HmacSha512Wrapper.init(nativeHmacSha512, hmacKey);
    }
    
    public void process(APDU apdu) throws ISOException {
        if (selectingApplet()) {
            return;
        }
        byte[] buffer = apdu.getBuffer();
        short dataLength = (short)2;
        switch(buffer[ISO7816.OFFSET_INS]) {
        	case INS_TEST_EC:
        		testEc(buffer);
        		break;
        	case INS_TEST_ECDH:
        		testEcdh(buffer);
        		break;
        	case INS_TEST_RIPEMD160:
        		testRipemd160(buffer);
        		break;
        	case INS_TEST_SHA512:
        		testSha512(buffer);
        		break;
        	case INS_TEST_BIP32_GEN:
        		testBip32Gen(buffer);
        		break;
        	case INS_TEST_BIP32_DERIVATION:
        		testBip32Derive(buffer, (buffer[ISO7816.OFFSET_P1] == (byte)0));
        		break;          		        		
        		
            default:
                 ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }        
        apdu.setOutgoingAndSend((short)0, dataLength);
    }
    
    public static void install (byte bArray[], short bOffset, byte bLength) throws ISOException {
        (new LedgerEligibility()).register(bArray, (short)(bOffset + 1), bArray[bOffset]);
    }
    
}
